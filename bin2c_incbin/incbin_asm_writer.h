#ifndef INCBIN_ASM_WRITER_H_INC
#define INCBIN_ASM_WRITER_H_INC

/*
 * Copyright 2017 Christian Helmich. All rights reserved.
 * Based on work by Branimir Karadzic
 * License: https://github.com/bkaradzic/bx#license-bsd-2-clause
 */
#include <fmt/format.h>

#include <cstdio>
#include <string>
#include <vector>

#include <bx/commandline.h>
#include <bx/crtimpl.h>
#include <bx/string.h>

// clang-format off
//apple spec
#if 0
__asm__(
.const_data
.globl g_tamago_yaml_data
.balign 16 _g_tamago_yaml_data:
.incbin "../../../assets/bactra/conversionrequests/remote/tamago.yaml"
.globl g_tamago_yaml_end
.balign 1 _g_tamago_yaml_end:
.byte 1
.globl g_tamago_yaml_size
.balign 16 _g_tamago_yaml_size:
.long _g_tamago_yaml_end - _g_tamago_yaml_data
);

//NASM
__asm__(
.data
.global g_tamago_yaml_data
.balign 16 _g_tamago_yaml_data:
.incbin "../../../assets/bactra/conversionrequests/remote/tamago.yaml"
.global g_tamago_yaml_end
.balign 1 _g_tamago_yaml_end:
.byte 1
.global g_tamago_yaml_size
.balign 16 _g_tamago_yaml_size:
.long _g_tamago_yaml_end - _g_tamago_yaml_data
);


/*
__asm__(".section .rodata
" ".global " "g_" "tamago_yaml_data" "
" ".type " "g_" "tamago_yaml_data" ", @object
" ".balign " "16" "
" "_" "g_" "tamago_yaml" "_data" ":
" ".incbin" " \"" "../../../assets/bactra/conversionrequests/remote/tamago.yaml" "\"
" ".global " "g_" "tamago_yaml_end" "
" ".type " "g_" "tamago_yaml_end" ", @object
" ".balign 1
" "_" "g_" "tamago_yaml" "_end" ":
" ".byte " "1
" ".global " "g_" "tamago_yaml_size" "
" ".type " "g_" "tamago_yaml_size" ", @object
" ".balign " "16" "
" "_" "g_" "tamago_yaml" "_size" ":
" ".int " "_" "g_" "tamago_yaml" "_end" " - " "_" "g_" "tamago_yaml" "_data" "
");
*/

#endif //0
// clang-format on

extern "C" const __attribute__((aligned(16))) unsigned char  g_tamago_yaml_data[];
extern "C" const __attribute__((aligned(16))) unsigned char* g_tamago_yaml_end;
extern "C" const unsigned int								 g_tamago_yaml_size;


const char* bin2c_ASM_srcText = R"(;
; generated by bin2c
; DO NOT MODIFY
;

section .rodata
 _g_{name}_data: \
 global g_{name}_data .type object \
 .balign 16 \
 .incbin "{file}"
;

 _g_{name}_end: \
 global g_{name}_end .type object \
 .balign 1 \
 .byte 1
;

 _g_{name}_size: \
 global g_{name}_size .type object \
 .balign 16 \
 .long _g_{name}_end - _g_{name}_data
;

)";

class Bin2C_ASM_Writer : public bx::WriterI
{
public:
	Bin2C_ASM_Writer(bx::WriterI* _writer, const char* _name, const char* _filePath)
		: m_writer(_writer), m_name(_name), m_filePath(_filePath)
	{
	}

	virtual ~Bin2C_ASM_Writer()
	{
	}

	virtual int32_t write(const void* _data, int32_t _size, bx::Error* /*_err*/ = NULL) BX_OVERRIDE
	{
		return 0;
	}

	void finish()
	{
		bx::writePrintf(m_writer,
						fmt::format(bin2c_ASM_srcText,	//
									fmt::arg("name", m_name),
									fmt::arg("file", m_filePath))
						  .c_str());
	}

	bx::WriterI* m_writer;
	std::string  m_name;
	std::string  m_filePath;
};

#endif	//! INCBIN_ASM_WRITER_H_INC